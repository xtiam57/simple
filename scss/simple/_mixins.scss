// rem convertion thanks to http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
//
// The mixin relies on a function to parse the integer from a value with a unit
// We define a list of values for both units
// We iterate through each value in the given parameter $values
// If the value is either auto or 0, we append it to the list as-is
// If the value has a unit, we split it to get both the unit and the raw value
// We append according values to the lists depending on the unit of the given value
// If the two lists are the same, we ouput only one (like margin-top: 0)
// We output the result
$rem-base: 16px !default;
$px-only: false;

@function parseInt($n) { /* 2 */
  @return $n / ($n * 0 + 1);
}

@function rem($values, $base: $rem-base) {
  $px : (); /* 3 */
  $rem: (); /* 3 */

  @each $value in $values { /* 4 */

    @if $value == 0 or $value == auto { /* 5 */
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);    /* 6 */
      $val: parseInt($value); /* 6 */

      @if $unit == "px" {  /* 7 */
        $px : append($px,  $value);
        $rem: append($rem, ($val / parseInt($base) + rem));
      }

      @if $unit == "rem" { /* 7 */
        $px : append($px,  ($val * parseInt($base) + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px-only == true {
    @return $px();
  }
  @else {
    @return $rem();
  }
}

@function em($values, $base: $rem-base) {
  $px : (); /* 3 */
  $em: (); /* 3 */

  @each $value in $values { /* 4 */

    @if $value == 0 or $value == auto { /* 5 */
      $px : append($px , $value);
      $em: append($em, $value);
    }

    @else {
      $unit: unit($value);    /* 6 */
      $val: parseInt($value); /* 6 */

      @if $unit == "px" {  /* 7 */
        $px : append($px,  $value);
        $em: append($em, ($val / parseInt($base) + em));
      }

      @if $unit == "em" { /* 7 */
        $px : append($px,  ($val * parseInt($base) + px));
        $em: append($em, $value);
      }
    }
  }

  @if $px-only == true {
    @return $px();
  }
  @else {
    @return $em();
  }
}

// Clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// Text color
@mixin color-variant($color) {
  color: $color !important;
}

// bg color
@mixin bg-variant($bg-color) {
  background-color: $bg-color !important;
}
